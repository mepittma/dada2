demo()
source("https://bioconductor.org/biocLite.R")
biocLite("SRAdb")
library(SRAdb)
sqlfile <- 'SRAmetadb.sqlite'
if(!file.exists('SRAmetadb.sqlite')) sqlfile <<- getSRAdbFile()
install.packages("ggplot2")
install.packages("ShortRead")
library(ShortRead)
sample.names <- strsplit(basename(R1), "-")
R1 <- "/Users/student/Documents/PollardRotation/InputData/42_27-R1.fastq"
R2 <- "/Users/student/Documents/PollardRotation/InputData/42_27-R2.fastq"
sample.names <- strsplit(basename(R1), "-")
basename(R1)
sample.names
sample.name <- strsplit(basename(R1), "-")[1]
sample.name
sName <- (strsplit(basename(R1), "-"))[1]
sName
sName <- (strsplit(basename(R1), "-"))[[1]]
sName <- (strsplit(basename(R1), "-"))[[1]][1]
plotQualityProfile(R1, R2)
library(dada2)
library(ShortRead)
library(ggplot2)
plotQualityProfile(R1, R2)
plotQualityProfile(R1)
plotQualityProfile(R2)
#!/usr/bin/env Rscript
library(dada2)
library(ShortRead)
library(ggplot2)
# # # # # # # # # # # # # # # # # # # # # # # #
# 1. Get sample files and name
# The argument will be the sample ID of the mouse
#sample = commandArgs(trailingOnly=TRUE)
# The name of the file will be the argument (sample ID)
#R1 <- paste0("/pollard/home/slyalina/work/projects/mouse_ibd_16s/demult/",sample,"-R1.fastq")
#R2 <- paste0("/pollard/home/slyalina/work/projects/mouse_ibd_16s/demult/",sample,"-R2.fastq")
R1 <- "/Users/student/Documents/PollardRotation/InputData/42_27-R1.fastq"
R2 <- "/Users/student/Documents/PollardRotation/InputData/42_27-R2.fastq"
sName <- (strsplit(basename(R1), "-"))[[1]][1]
# # # # # # # # # # # # # # # # # # # # # # # #
# 2. Check sequence quality
# - have we pre-trimmed the primers? - yes
plotQualityProfile(R1)
plotQualityProfile(R2)
# # # # # # # # # # # # # # # # # # # # # # # #
# 3. Filtering
# Just chose tutorial defaults...maybe play with this?
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
errR <- learnErrors(paste0(filt_path,"/",sName,"-R-filt.fastq.gz"), multithread=TRUE)
plotQualityProfile(R1)
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
truncLen=c(75,50),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
errR <- learnErrors(paste0(filt_path,"/",sName,"-R-filt.fastq.gz"), multithread=TRUE)
plotErrors(errR, nominalQ=TRUE)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
#truncLen=c(75,50),
truncLen=c(100,75),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
errR <- learnErrors(paste0(filt_path,"/",sName,"-R-filt.fastq.gz"), multithread=TRUE)
plotErrors(errR, nominalQ=TRUE)
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
#truncLen=c(75,50),
#truncLen=c(100,75),
truncLen=c(50,25),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
#truncLen=c(75,50),
#truncLen=c(100,75),
truncLen=c(125,100),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
errR <- learnErrors(paste0(filt_path,"/",sName,"-R-filt.fastq.gz"), multithread=TRUE)
plotErrors(errR, nominalQ=TRUE)
# Just chose tutorial defaults...maybe play with this?
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
#truncLen=c(75,50),
#truncLen=c(100,75),
#truncLen=c(125,100),
truncLen=c(150,125),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
errR <- learnErrors(paste0(filt_path,"/",sName,"-R-filt.fastq.gz"), multithread=TRUE)
plotErrors(errR, nominalQ=TRUE)
plotQualityProfile(R1)
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
truncLen=c(200,150),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(paste0(filt_path,"/",sName,"-F-filt.fastq.gz"), multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
#!/usr/bin/env Rscript
library(dada2)
library(ShortRead)
library(ggplot2)
# # # # # # # # # # # # # # # # # # # # # # # #
# 1. Get sample files and name
# The argument will be the sample ID of the mouse
#sample = commandArgs(trailingOnly=TRUE)
# The name of the file will be the argument (sample ID)
#R1 <- paste0("/pollard/home/slyalina/work/projects/mouse_ibd_16s/demult/",sample,"-R1.fastq")
#R2 <- paste0("/pollard/home/slyalina/work/projects/mouse_ibd_16s/demult/",sample,"-R2.fastq")
R1 <- "/Users/student/Documents/PollardRotation/InputData/42_27-R1.fastq"
R2 <- "/Users/student/Documents/PollardRotation/InputData/42_27-R2.fastq"
sName <- (strsplit(basename(R1), "-"))[[1]][1]
# # # # # # # # # # # # # # # # # # # # # # # #
# 2. Check sequence quality
# - have we pre-trimmed the primers? - yes
plotQualityProfile(R1)
plotQualityProfile(R2)
# # # # # # # # # # # # # # # # # # # # # # # #
# 3. Filtering
# Just chose tutorial defaults...maybe play with this?
# Create a location to contain the filtered data
#filt_path <- "/pollard/home/mpittman/filt_16S"
filt_path <- "/Users/student/Documents/PollardRotation/InputData/filt_16S"
out <- filterAndTrim(R1, paste0(filt_path,"/",sName,"-F-filt.fastq.gz"),
R2, paste0(filt_path,"/",sName,"-R-filt.fastq.gz"),
truncLen=c(200,150),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(filtF, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
errR <- learnErrors(filtR, multithread=TRUE)
plotErrors(errR, nominalQ=TRUE)
# Just chose tutorial defaults...maybe play with this?
filtF = paste0(filt_path,"/",sName,"-F-filt.fastq.gz")
filtR = paste0(filt_path,"/",sName,"-R-filt.fastq.gz")
out <- filterAndTrim(R1, filtF,
R2, filtR,
truncLen=c(200,150),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
# # # # # # # # # # # # # # # # # # # # # # # #
# 4. Check that error rates look reasonable
errF <- learnErrors(filtF, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
errR <- learnErrors(filtR, multithread=TRUE)
plotErrors(errR, nominalQ=TRUE)
# 5. Dereplication
# In this step we condense the data by collapsing together all reads that encode the same
# sequence, which significantly reduces later computation times
derepF <- derepFastq(filtF, verbose=TRUE)
derepR <- derepFastq(filtR, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepF) <- sample.names
names(derepR) <- sample.names
# Name the derep-class objects by the sample names
names(derepF) <- sName
names(derepR) <- sName
derepF
dadaF <- dada(derepF, err=errF, multithread=TRUE)
dadaR <- dada(derepR, err=errR, multithread=TRUE)
# inspect the class object
dadaFs[[1]]
dadaF[[1]]
dadaR[[1]]
mergers <- mergePairs(dadaF, derepF, dadaR, derepR, verbose=TRUE)
head(mergers[[1]])
# # # # # # # # # # # # # # # # # # # # # # # #
# 7. Construct sequence table
# Sequences that are much longer or shorter than expected may be the result of non-specific
# priming, and may be worth removing
# (eg. seqtab2 <- seqtab[,nchar(colnames(seqtab)) %in% seq(250,256)]).
# This is analogous to “cutting a band” in-silico to get amplicons of the targeted length.
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))
# # # # # # # # # # # # # # # # # # # # # # # #
# 8. Remove chimeras
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# # # # # # # # # # # # # # # # # # # # # # # #
# 9. Track reads through the pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaF, getN), sapply(mergers, getN), rowSums(seqtab), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoised", "merged", "tabled", "nonchim")
rownames(track) <- sample.names
head(track)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaF, getN), sapply(mergers, getN), rowSums(seqtab), rowSums(seqtab.nochim))
track <- cbind(out, sum(getUniques(dadaF)), sum(getUniques(mergers)), rowSums(seqtab), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoised", "merged", "tabled", "nonchim")
rownames(track) <- sample.names
head(track)
taxa <- assignTaxonomy(seqtab.nochim, "Training/silva_nr_v128_train_set.fa.gz", multithread=TRUE)
setwd('/Users/student/Documents/PollardRotation/dada2')
taxa <- assignTaxonomy(seqtab.nochim, "silva_nr_v128_train_set.fa.gz", multithread=TRUE)
taxa <- addSpecies(taxa, "Training/silva_species_assignment_v128.fa.gz")
taxa <- addSpecies(taxa, "silva_species_assignment_v128.fa.gz")
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
head(taxa.print)
View(taxa.print)
View(seqtab.nochim)
View(taxa)
View(seqtab)
View(seqtab.nochim)
track
View(seqtab.nochim)
View(taxa)
readRDS("/Users/student/Documents/seqtab_nochim.rds")
sample <- readRDS("/Users/student/Documents/seqtab_nochim.rds")
names(sample)
other <- readRDS("/Users/student/Documents/taxa_silva_plus.rds")
View(other)
